<?xml version="1.0" encoding="UTF-8" ?>
<displays>
<display id="f2a2a6b6-018c-1000-8002-ac1005209b6a" type="" style="plsql-dbms_output" enable="true">
	<name><![CDATA[Test-Oracle]]></name>
	<description><![CDATA[]]></description>
	<tooltip><![CDATA[]]></tooltip>
	<drillclass><![CDATA[]]></drillclass>
	<CustomValues>
	</CustomValues>
	<query>
		<sql><![CDATA[--- +============================================================================================================================================+
-- | Test-Oracle.sql
-- +============================================================================================================================================+
-- | Author: Martin Bruegger, Switzerland
-- | Name: 	 Martin Bruegger
-- | E-Mail: martin.bruegger@gmail.com
-- +--------------------------------------------------------------------------------------------------------------------------------------------+
-- | Description:
-- | Test-Oracle.sql is a SQL Developer User Defined Report or SQL-File FOR SQLAgain
-- | Performs Check_MK Oracle Monitor-Tests as in Watch-Oracle.ps1 defined, plus some others like DataGuard, Alertlog, Invalid Objects 
-- | It Displays the Result as a HTML Report in SQL Developer or any Browser
-- | Apart from the 1st Checks in "Data Guard" are all SELECTS dynamic Statements, because it runs also in a MOUNTED Physical Standby DB
-- | With the implementation of DBMS_SCHEDULER, this script was splitted into a stored Procedure and a script. The script-part is ONLY FOR MOUNTED DBs
-- +--------------------------------------------------------------------------------------------------------------------------------------------+
-- |   
-- | Change History:
-- +-----------+------------+------------+------------------------------------------------------------------------------------------------------+
-- | Event     | Datum      | Autor      | Kommentar
-- +===========+============+============+======================================================================================================+
-- | created   | 2024/01/10 | mbruegger  | created
-- | modified  | 2024/01/26 | mbruegger  | Modifications according to codescan (PL/SQL and SQL Coding Guidelines, Trivadis) suggestions
-- | modified  | 2024/01/31 | mbruegger  | "where rownum" and "order by" G-3185: Never use ROWNUM at the same query level as ORDER BY.
-- | modified  | 2024/02/02 | mbruegger  | smaller font-size for "SQL Developer"
-- | modified  | 2024/06/18 | mbruegger  | DB startup-time added in header-section, DataGuard check when v$dataguard_config contains data 
-- | modified  | 2024/07/11 | mbruegger  | Comment cosmetics (after global change/replace action)
-- | modified  | 2024/07/17 | mbruegger  | TEST_DATA_GUARD: ignore v$database.switchover_status when in PDB
-- | modified  | 2024/07/19 | mbruegger  | Added TEST_CONTAINER_DATABASE and TEST_FLASHBACK_RECOVERY_AREA, css class='number'
-- | modified  | 2024/07/24 | mbruegger  | Added [PREP|TEST]_NEED_BACKUP; implemented as SYS.YP_TEST_ORACLE because DBMS_SCHEDULER and Credentials owned by SYS-User
-- | modified  | 2024/07/26 | mbruegger  | TEST_DATA_GUARD: added DGMGRL "show Configuration/show observer" (DBMS_SCHEDULER EXTERNAL_SCRIPT)
-- | modified  | 2024/07/30 | mbruegger  | Added PREP_NEED_BACKUP (split from TEST_NEED_BACKUP, fixed DBMS_SERVICES in DG Databases
-- | modified  | 2024/08/02 | mbruegger  | Added class textWarn: whenever a test contains more than one test, the causer for the alert is in textWarn colored
-- | modified  | 2024/08/26 | mbruegger  | CHECK_MK_LOCKS: exclude SYS.PLAN_TABLE$ in Monitor
-- | modified  | 2024/10/01 | mbruegger  | CHECK_MK_TABLESPACES: New Test "Critical: No Tempfiles for Temporary Tablespace found"
-- | modified  | 2025/01/09 | mbruegger  | CSS fixes - added  "div.box" for <PRE> and "file" tables, "nowrap" for date-columns (don't wrap timestamps). New l_MyTrackInfo
-- | modified  | 2025/01/10 | mbruegger  | 2.1.1 - Resulting HTML Code proofed/fixed according https://validator.w3.org/nu/#file
-- | modified  | 2025/01/14 | mbruegger  | 2.1.2 - Replaced CSS ID with CSS CLASS Selectors ("header", "file") according to https://validator.w3.org/nu/#file
-- | modified  | 2025/01/14 | mbruegger  | 2.1.3 - HTML Footer is now a P(aragraf) 
-- +-----------+------------+------------+------------------------------------------------------------------------------------------------------+
DECLARE
    l_MyTrackInfo   VARCHAR2(100) := 'SYS.YP_TEST_ORACLE Version 2.1.3' ;
	l_ModuleName	VARCHAR2(100);							-- Query ModuleName (DBMS_APPLICATION_INFO.READ_MODULE). Use smaller font-sizes for "SQL Developer"
	l_ActionName	VARCHAR2(100);
	l_FontSize		VARCHAR2(4) := '12px' ;					-- Style: font-size for HTML elements
	l_TableWidth    VARCHAR2(20) := 'min-width: 800px;' ;	-- Style: table with (SQL Developer) or min-with (all other Browsers) 
    l_DBID          v$database.dbid%type;
	l_DBName        v$database.name%type;
	l_DBUName       v$database.db_unique_name%type;
	l_DBOpenMode	v$database.open_mode%type;	
	l_DBLogMode		v$database.log_mode%type;
	l_CDB			v$database.cdb%type;
	l_PlatformName  v$database.platform_name%type;
	l_ORACLE_HOME	VARCHAR2(100);
	l_CON_ID		PLS_INTEGER;							-- sys_context('USERENV','CON_ID') 1: connected to a CDB
	l_DBVersion		v$instance.version%type;	
	l_HostName      v$instance.host_name%type;
	l_InstanceName  v$instance.instance_name%type;	
	l_Date			VARCHAR2(40);
    l_Startup       VARCHAR2(20);
    l_DGConfig      PLS_INTEGER;
	l_TestFlag		PLS_INTEGER;
	l_RowCount      NUMBER;
	l_Comments      VARCHAR2(32767) ;
	l_CommentsPart	VARCHAR2(32767) ;
    
PROCEDURE PRINT_RESULT_COLUMN (in_TestFlag IN  PLS_INTEGER) is
BEGIN
	IF in_TestFlag = 0 THEN 
		sys.DBMS_OUTPUT.PUT_LINE('<TD class="bg_ok">OK</TD>');
	ELSIF in_TestFlag = 1 THEN      
		sys.DBMS_OUTPUT.PUT_LINE('<TD class="bg_warning">Warning</TD>');
	ELSE 
		sys.DBMS_OUTPUT.PUT_LINE('<TD class="bg_critical">Critical</TD>');
	END IF;
END PRINT_RESULT_COLUMN ;

PROCEDURE TEST_CONTAINER_DATABASE is
BEGIN 
	l_TestFlag := 0 ;
	l_Comments :=  '<TABLE> <TR><TD>Container ID</TD><TD>DB Name</TD><TD>Open Mode</TD><TD>Restricted </TD><TD>Open Time </TD><TD class=''number''>DB Size in GB</TD> </TR>' ;
	<<for_loop_CDB_1>>	
	FOR TS in (
		select con_id, name, open_mode, restricted, to_char(open_time,'YYYY/MM/DD HH24:MI:SS') open_time, to_char(total_size/(1024*1024*1024),'999,999,990.00') DB_sizeGB  from v$containers 
		) LOOP 
		IF (TS.con_id = 2 AND TS.open_mode != 'READ ONLY') OR (TS.con_id != 2 AND TS.open_mode != 'READ WRITE') THEN		-- PDB$SEED=READ ONLY, all other READ WRITE 
			l_TestFlag := 1 ;    
		END IF;
		l_Comments := l_Comments || '<TR><TD  class=''number''>'||TS.con_id ||'</TD><TD>'||TS.name ||'</TD><TD>'||TS.open_mode ||'</TD><TD>'||TS.restricted ||'</TD><TD>'||TS.open_time ||'</TD><TD class=''number''>'||TS.DB_sizeGB ||'</TD></TR>' ;	
		
	END LOOP for_loop_CDB_1 ;
	l_Comments := l_Comments || '</TABLE>Warning when Open Mode not READ WRITE (Exception: PDB$SEED open in READ ONLY)';
		
    sys.DBMS_OUTPUT.PUT_LINE('<TR><TH>CDB</TH>');
    PRINT_RESULT_COLUMN(l_TestFlag) ;
    sys.DBMS_OUTPUT.PUT_LINE('<TD>'||l_Comments||'</TD></TR>');	
END TEST_CONTAINER_DATABASE ;

PROCEDURE TEST_FLASHBACK_RECOVERY_AREA is
	l_SpaceUsed BOOLEAN := FALSE ;
BEGIN
	l_TestFlag := 0 ;
	<<for_loop_FRA_1>>	
	FOR TS in (
		select name, to_char(space_limit/(1024*1024*1024),'990.00') space_limitGB, to_char(space_used/(1024*1024*1024),'999,990.00') space_usedGB, 
			((space_used-space_reclaimable)*100)/space_limit space_used_pct, to_char(space_reclaimable/(1024*1024*1024),'999,990.00') space_reclaimableGB from V$RECOVERY_FILE_DEST 
		) LOOP 
		IF    TS.space_used_pct > 95 THEN				-- Critical when space_used_pct > 95
			l_TestFlag := 2 ;
		ELSIF TS.space_used_pct > 90 THEN 				-- Warning when space_used_pct > 90 
			l_TestFlag := 1 ;    
		END IF;
		l_Comments := '<TABLE>';
		l_Comments := l_Comments || '<TR><TD>DB_RECOVERY_FILE_DEST				</TD><TD class=''number''>'||TS.name||'\'||l_DBUName            ||'   </TD></TR>' ;
		l_Comments := l_Comments || '<TR><TD>Space Limit          				</TD><TD class=''number''>'||TS.space_limitGB                   ||' GB</TD></TR>' ;
		l_Comments := l_Comments || '<TR><TD>Space Used           				</TD><TD class=''number''>'||TS.space_usedGB                    ||' GB</TD></TR>' ;
		l_Comments := l_Comments || '<TR><TD>Space Reclaimable    				</TD><TD class=''number''>'||TS.space_reclaimableGB             ||' GB</TD></TR>' ;
		l_Comments := l_Comments || '<TR><TD>% Used 							</TD><TD class=''number''>'||to_char(TS.space_used_pct,'990.0') ||'  %</TD></TR>' ;
		l_Comments := l_Comments || '</TABLE>Warning when % Used > 90, Critical when > 95'  ;
		IF TS.space_used_pct > 0 THEN
			l_SpaceUsed := TRUE ;
		END IF;
	END LOOP for_loop_FRA_1;
	
	<<for_loop_FRA_2>>	
	FOR TS in (
		select flashback_on, retention_target, to_char(oldest_flashback_time,'YYYY/MM/DD HH24:MI:SS') oldest_flashback_time, to_char(flashback_size/(1024*1024*1024),'999,990.00') flashback_sizeGB, 
			to_char(estimated_flashback_size/(1024*1024*1024),'999,990.00') estimated_sizeGB  from V$FLASHBACK_DATABASE_LOG, V$DATABASE
		) LOOP 
		IF TS.flashback_on = 'YES' THEN	
			l_Comments := l_Comments || '<br><br>Flashback Database Information   <TABLE>';
			l_Comments := l_Comments || '<TR><TD>DB_FLASHBACK_RETENTION_TARGET	            </TD><TD class=''number''>'||TS.retention_target       ||'</TD></TR>'  ;
			l_Comments := l_Comments || '<TR><TD>Oldest Flashback Time        	            </TD><TD class=''number''>'||TS.oldest_flashback_time  ||'</TD></TR>'  ;
			l_Comments := l_Comments || '<TR><TD>Current Size                 	            </TD><TD class=''number''>'||TS.flashback_sizeGB       ||' GB</TD></TR>'  ;
			l_Comments := l_Comments || '<TR><TD>Estimated Size needed for target retention </TD><TD class=''number''>'||TS.estimated_sizeGB       ||' GB</TD></TR>';
			l_Comments := l_Comments || '</TABLE>';
		END IF;		
	END LOOP for_loop_FRA_2;
	
	IF l_SpaceUsed THEN									-- skip this table when Recovery Area contains no data 
		l_Comments := l_Comments || '<br><br>Recovery Area Usage Information   <TABLE>';
		l_Comments := l_Comments || '<TR><TD>File Type 	</TD><TD class=''number''>% Space Used </TD><TD class=''number''>% Space Reclaimable </TD><TD class=''number''>Number of Files </TD></TR>' ;
		<<for_loop_FRA_3>>	
		FOR TS in (
			select file_type, to_char(percent_space_used,'990.0') percent_space_used_c , to_char(percent_space_reclaimable,'990.0') percent_space_reclaimable , number_of_files 
				from V$RECOVERY_AREA_USAGE where percent_space_used > 0 order by percent_space_used desc 
			) LOOP 
			l_Comments := l_Comments || '<TR><TD>'||TS.file_type ||'</TD><TD  class=''number''>'||TS.percent_space_used_c ||'</TD><TD class=''number''>'||TS.percent_space_reclaimable ||'</TD><TD class=''number''>'||TS.number_of_files ||'</TD> </TR>' ;			
		END LOOP for_loop_FRA_3;
		l_Comments := l_Comments || '</TABLE>';
	END IF;
		
    sys.DBMS_OUTPUT.PUT_LINE('<TR><TH>Recovery Area</TH>');
    PRINT_RESULT_COLUMN(l_TestFlag) ;
    sys.DBMS_OUTPUT.PUT_LINE('<TD>'||l_Comments||'</TD></TR>');	
END TEST_FLASHBACK_RECOVERY_AREA;

PROCEDURE TEST_DATA_GUARD is
BEGIN
	l_TestFlag := 0 ;
	l_RowCount := 0 ;
	<<for_loop_DATA_GUARD_1>>	
	FOR TS in (
		select database, connect_identifier, dataguard_role, redo_source, enabled, status from V$DG_BROKER_CONFIG   
		) LOOP 
		IF l_RowCount = 0 THEN 
			l_Comments := 'Data Guard Broker Configuration:<br>' ;
			l_Comments := l_Comments||'<TABLE><TR><TH>Database</TH><TH>Connect Identifier</TH><TH>Database Role</TH><TH>Redo Source</TH><TH>DG Broker enabled</TH><TH>Status</TH></TR>' ;
		END IF;
		l_Comments := l_Comments ||'<TR><TD>'|| TS.database ||'</TD><TD>'|| TS.connect_identifier ||'</TD><TD>'|| TS.dataguard_role ||'</TD><TD>'|| TS.redo_source ||'</TD><TD>'|| TS.enabled ||'</TD><TD class=''number''>';
		IF TS.status > 0 THEN
			l_TestFlag := 2 ;
			l_Comments := l_Comments ||'<p class=''textWarn''>'||TS.status ||'</p></TD></TR>';			
		ELSE
			l_Comments := l_Comments ||TS.status ||'</TD></TR>';
		END IF;
		
		l_RowCount := l_RowCount +1;
	END LOOP for_loop_DATA_GUARD_1;
	IF l_RowCount > 0 THEN 
		l_Comments := l_Comments ||'</TABLE>' ;
		IF l_TestFlag  > 0 THEN
			l_Comments := l_Comments ||'Critical - Please verify above STATUS (View: V$DG_BROKER_CONFIG) <br>' ; 
		END IF ;
	END IF;
	
	l_Comments := l_Comments ||'<br>' ; 
	<<for_loop_DATA_GUARD_2>>
	FOR TS in (
		select database_role, protection_mode, protection_level, force_logging, flashback_on, dataguard_broker, fs_failover_status, fs_failover_mode,  
			fs_failover_observer_present, fs_failover_observer_host, fs_failover_current_target, fs_failover_threshold from V$DATABASE 
		) LOOP 
		l_Comments := l_Comments ||'<TABLE><TR><TH>Object</TH><TH>State</TH><TH>Description</TH></TR>' ;
        l_Comments := l_Comments ||'<TR><TD>DB Unique Name</TD><TD>'||l_DBUName||'</TD><TD>Globally unique name for the database';
		l_Comments := l_Comments ||'</TD><TR><TD>Database Role</TD><TD>'||TS.database_role||'</TD><TD>';
		IF l_DBOpenMode = 'READ WRITE' and TS.database_role = 'PRIMARY' THEN 															-- open Mode = READ WRITE and DB Role = PRIMARY
			l_Comments := l_Comments ||'OK' ;
		ELSIF l_DBOpenMode = 'MOUNTED' and TS.database_role = 'PHYSICAL STANDBY' THEN													-- OR open Mode = MOUNTED and DB Role = PHYSICAL STANDBY
			l_Comments := l_Comments ||'OK' ;
		ELSE
			l_Comments := l_Comments ||'<p class=''textWarn''>Critical - Verify OPEN_MODE and/or DATABASE_ROLE.</p>' ;
			l_TestFlag := 2;
		END IF;
		l_Comments := l_Comments ||'</TD><TR><TD>Protection Mode</TD><TD>'||TS.protection_mode||'</TD><TD>';
		IF TS.protection_mode = TS.protection_level THEN 																				-- protection_mode=protection_level
			l_Comments := l_Comments ||'OK - Protection Level = configured Protection Mode' ;
		ELSE
			l_Comments := l_Comments ||'<p class=''textWarn''>Critical - Protection Level ('||TS.protection_level||' is different to the configured Protection Mode.</p>' ;
			l_TestFlag := 2;
		END IF;
		
		l_Comments := l_Comments ||'</TD></TR><TR><TD>Force Logging</TD><TD>'||TS.force_logging||'</TD><TD>';							-- Force Logging = YES
		IF TS.force_logging = 'YES' THEN 
				l_Comments := l_Comments ||'OK' ;
			ELSE 
				l_Comments := l_Comments ||'<p class=''textWarn''>Critical - Force Logging should be ENABLED.</p>' ;
				l_TestFlag := 2;
		END IF;
		l_Comments := l_Comments ||'</TD></TR><TR><TD>Flashback On</TD><TD>'||TS.flashback_on||'</TD><TD>';								-- Flashback On = YES
		IF TS.flashback_on = 'YES' THEN 
				l_Comments := l_Comments ||'OK' ;
			ELSE 
				l_Comments := l_Comments ||'<p class=''textWarn''>Critical - Flashback should be ON.</p>' ;
				l_TestFlag := 2;
		END IF;
		l_Comments := l_Comments ||'</TD></TR><TR><TD>Data Guard Broker</TD><TD>'||TS.dataguard_broker||'</TD><TD>';					-- Data Guard Broker = ENABLED
		IF TS.dataguard_broker = 'ENABLED' THEN 
			l_Comments := l_Comments ||'OK' ;
		ELSE 
			l_Comments := l_Comments ||'<p class=''textWarn''>Critical - Data Guard Broker should be enabled.</p>' ;
			l_TestFlag := 2;
		END IF; 
		l_Comments := l_Comments ||'</TD></TR><TR><TD>Observer present</TD><TD>'||TS.fs_failover_observer_present||'</TD><TD>';			-- Fast-Start Failover Observer Present = YES
		IF TS.fs_failover_observer_present = 'YES' THEN 
			l_Comments := l_Comments ||'OK' ;
		ELSE 
			l_Comments := l_Comments ||'<p class=''textWarn''>Critical - No Fast-Start Failover Observer connected to '||l_DBName||'.</p>' ;
			l_TestFlag := 2;
		END IF; 
		l_Comments := l_Comments ||'</TD></TR><TR><TD>Observer Host</TD><TD>'||TS.fs_failover_observer_host||'</TD><TD>Host where the Observer is running.';			
		
		l_Comments := l_Comments ||'</TD></TR><TR><TD>Fast-Start Failover Status</TD><TD>'||TS.fs_failover_status||'</TD><TD>';		-- Fast-Start Failover Status = SYNCHRONIZED
		IF TS.fs_failover_status = 'SYNCHRONIZED' THEN 
			l_Comments := l_Comments ||'OK' ;
		ELSE 
			l_Comments := l_Comments ||'<p class=''textWarn''>Critical - Failover Status is not SYNCHRONIZED.</p>' ;
			l_TestFlag := 2;
		END IF; 
		l_Comments := l_Comments ||'</TD></TR><TR><TD>Fast-Start Failover Mode</TD><TD>'||TS.fs_failover_mode||'</TD><TD>';			-- Fast-Start Failover Mode = ZERO DATA LOSS
		IF TS.fs_failover_mode = 'ZERO DATA LOSS' THEN 
			l_Comments := l_Comments ||'OK' ;
		ELSE 
			l_Comments := l_Comments ||'<p class=''textWarn''>Critical - Failover Mode is not ZERO DATA LOSS.</p>' ;
			l_TestFlag := 2;
		END IF; 
		l_Comments := l_Comments ||'</TD></TR><TR><TD>Failover Target</TD><TD>'||TS.fs_failover_current_target||'</TD><TD>DB_UNIQUE_NAME of the standby that is the current fail-safe failover observer target standby for the Data Guard configuration';
		l_Comments := l_Comments ||'</TD></TR><TR><TD>Failover Threshold</TD><TD>'||TS.fs_failover_threshold||'</TD><TD>Time (in seconds) that the observer will attempt to reconnect with a disconnected primary before attempting fail-safe failover observer with the target standby';
		
	END LOOP for_loop_DATA_GUARD_2;	
    
	l_Comments := l_Comments ||'</TD></TR></TABLE><br>Last 30 Records from V$DATAGUARD_STATUS:' ;	
	l_CommentsPart := '1999/02/31 12:00:00' ;
	l_RowCount := 0 ;
	<<for_loop_DATA_GUARD_3>>
	FOR TS in (
		select b.time, b.message, b.severity from
		( select to_char(a.timestamp,'YYYY/MM/DD HH24:MI:SS') time, a.message, a.severity  from 
			(select timestamp, message, severity  from V$DATAGUARD_STATUS where timestamp > sysdate-7 order by timestamp desc) a where rownum < 31  ) b order by time asc
		) LOOP
		IF l_RowCount = 0 THEN 
			l_Comments := l_Comments ||'<DIV class="box"><TABLE class="file">' ;
		END IF;
		IF l_CommentsPart != TS.time THEN 
			l_Comments := l_Comments || '<TR><TD class="nowrap">'||TS.time ;
			l_CommentsPart := TS.time ;
		ELSE
			l_Comments := l_Comments || '<TR><TD>' ;
		END IF;
		l_Comments := l_Comments ||'</TD><TD>'||TS.message||'</TD><TD>'||TS.severity||'</TD></TR>' ;	
		l_RowCount := l_RowCount +1;
	END LOOP for_loop_DATA_GUARD_3; 
	IF l_RowCount > 0 THEN 
		l_Comments := l_Comments ||'</TABLE></DIV>' ;
	END IF;
	
	IF l_DBOpenMode = 'MOUNTED' THEN
		l_Comments := l_Comments ||'<br><p class="textWarn">The Database is MOUNTED - not OPEN for normal Queries - skipping other Checks.</p>' ;
	END IF;
	
	sys.DBMS_OUTPUT.PUT_LINE('<TR><TH>Data Guard</TH>');
	PRINT_RESULT_COLUMN(l_TestFlag) ;
	sys.DBMS_OUTPUT.PUT_LINE('<TD>'||l_Comments||'</TD></TR>'); 
END TEST_DATA_GUARD ;

BEGIN
	DBMS_APPLICATION_INFO.read_module (   l_ModuleName, l_ActionName );
	IF l_ModuleName = 'SQL Developer' THEN
		l_FontSize := '9px' ;
		l_TableWidth := 'width: 800px;' ;
	END IF;
	select d.DBID, upper(sys_context('USERENV','DB_NAME')), sys_context('USERENV','DB_UNIQUE_NAME'), sys_context('USERENV','ORACLE_HOME'), substr(i.version_full,1,(instr(i.version_full,'.',1,2)-1)), to_char(i.startup_time,'YYYY/MM/DD HH24:MI:SS'),
		to_char(sysdate,'DL, HH24:MI'),  d.cdb, sys_context('USERENV','CON_ID'),  i.host_name, d.platform_name, upper(i.instance_name), d.open_mode, d.log_mode, (select count(*) from v$dataguard_config)
		into l_DBID, l_DBName, l_DBUName, l_ORACLE_HOME, l_DBVersion, l_Startup, l_Date, l_CDB, l_CON_ID, l_HostName, l_PlatformName, l_InstanceName, l_DBOpenMode, l_DBLogMode, l_DGConfig from v$database d, v$instance i ;

    IF l_DBOpenMode like 'READ%' THEN                               -- READ WRITE/READ ONLY: call SYS.YP_TEST_ORACLE. It contains much more tests than covered here in that script
        EXECUTE IMMEDIATE 'BEGIN SYS.YP_TEST_ORACLE() ; END;' ;     -- prevent "PLS-00201 identifier must be declared" when OPEN_MODE=MOUNTED - even when we do not call it then
    ELSE     
        sys.DBMS_OUTPUT.PUT_LINE('<!DOCTYPE html>');
        sys.DBMS_OUTPUT.PUT_LINE('<HTML lang="en">');
        sys.DBMS_OUTPUT.PUT_LINE('<HEAD>');
        sys.DBMS_OUTPUT.PUT_LINE('<meta charset="utf-8">');
        sys.DBMS_OUTPUT.PUT_LINE('<title>Test-Oracle '|| l_DBName ||'@'|| l_HostName || '</title>');
        sys.DBMS_OUTPUT.PUT_LINE('<STYLE>');
        sys.DBMS_OUTPUT.PUT_LINE('body                         {background-color: #2E2E2E}');
        sys.DBMS_OUTPUT.PUT_LINE('*                            {border-collapse: collapse;}');
        sys.DBMS_OUTPUT.PUT_LINE('h1, th, tr                   {color: #F2F2F2;}');
        sys.DBMS_OUTPUT.PUT_LINE('td, th                       {border: 1px solid #909090; text-align: left; font-family: arial; font-size: '||l_FontSize||'; padding-left: 5px; padding-right: 5px;}');
        sys.DBMS_OUTPUT.PUT_LINE('p                            {color: #CCCCCC; font-style: italic; font-size: 0.95em;}');
        sys.DBMS_OUTPUT.PUT_LINE('.header td, .header th       {border-style: none; text-align: left; font-family: arial; padding-top: 0px; padding-bottom: 0px;}');
        sys.DBMS_OUTPUT.PUT_LINE('.file                        {border-spacing: 0;}');
        sys.DBMS_OUTPUT.PUT_LINE('.file td                     {border: 0; font-family: consolas; padding-top: 0px; padding-bottom: 0px;}');
        sys.DBMS_OUTPUT.PUT_LINE('div.box                      {border-style: solid; border-width: thin; border-color:#dadce0; border-radius: 8px; padding: 10px 10px; background-color: #404040; font-family: consolas;}');
        sys.DBMS_OUTPUT.PUT_LINE('.comment table               {table-layout: fixed; '||l_TableWidth||'}');
        sys.DBMS_OUTPUT.PUT_LINE('td.comment, th.comment       {border: 1px solid #595959; font-family: consolas; font-size:  12px;}');
        sys.DBMS_OUTPUT.PUT_LINE('.number                      {text-align: right;}');  	
        sys.DBMS_OUTPUT.PUT_LINE('.textWarn                    {color: #FFAA00 ;}');  	
        sys.DBMS_OUTPUT.PUT_LINE('.nowrap                      {white-space: nowrap; width: 1%;}');  
        sys.DBMS_OUTPUT.PUT_LINE('.bg_ok                       {background-color: #00802b;}');  
        sys.DBMS_OUTPUT.PUT_LINE('.bg_warning                  {background-color: #ffaa00;}');  
        sys.DBMS_OUTPUT.PUT_LINE('.bg_critical                 {background-color: #cc5200;}');  
        sys.DBMS_OUTPUT.PUT_LINE('</STYLE>');
        sys.DBMS_OUTPUT.PUT_LINE('</HEAD>');
        sys.DBMS_OUTPUT.PUT_LINE('<BODY>');
        sys.DBMS_OUTPUT.PUT_LINE('<TABLE class="header"><TR><TH>Test-Oracle</TH><TD>Perform DB and Check_MK Monitor Tests</TD></TR><TR><TD>DB Name</TD><TH>'||l_DBName||'</TH></TR>');
        IF l_InstanceName != upper(l_DBUName) THEN 
            sys.DBMS_OUTPUT.PUT_LINE('<TR><TD>db_unique_name</TD><TD>'||l_DBUName||'</TD></TR>') ;
        END IF;
        IF l_CDB = 'YES' THEN 
            sys.DBMS_OUTPUT.PUT_LINE('<TR><TD>CDB Name</TD><TD>'||l_InstanceName||'</TD></TR>') ;
        END IF;
        sys.DBMS_OUTPUT.PUT_LINE('<TR><TD>DB ID</TD><TD>'||l_DBID||'</TD></TR>') ;
        sys.DBMS_OUTPUT.PUT_LINE('<TR><TD>Host-Name</TD><TD>'||l_HostName||'    <i> ('||l_PlatformName||')</i></TD></TR><TR><TD>Open-Mode</TD><TD class="textWarn">'||l_DBOpenMode||'</TD></TR> <TR><TD>Log-Mode</TD><TD>'||l_DBLogMode||'</TD></TR>');
        sys.DBMS_OUTPUT.PUT_LINE('<TR><TD>Oracle-Version</TD><TD>'||l_DBVersion||'</TD></TR><TR><TD>Startup Date</TD><TD>'||l_Startup||'</TD></TR></TABLE><br>');
        sys.DBMS_OUTPUT.PUT_LINE('<DIV class="comment">');
        sys.DBMS_OUTPUT.PUT_LINE('<TABLE><TR><TH>Test Name</TH><TH>Result</TH><TH>Comments</TH></TR>');
            IF l_CON_ID = 1 THEN
                TEST_CONTAINER_DATABASE() ;
            END IF;
            TEST_FLASHBACK_RECOVERY_AREA();
            IF l_DGConfig > 0 THEN   
                TEST_DATA_GUARD();
            END IF;
            sys.DBMS_OUTPUT.PUT_LINE('</TABLE>');
            sys.DBMS_OUTPUT.PUT_LINE('<BR><BR><P>'||l_MyTrackInfo||', '||l_Date||'</P>');
            sys.DBMS_OUTPUT.PUT_LINE('</DIV>');
            sys.DBMS_OUTPUT.PUT_LINE('</BODY>');
            sys.DBMS_OUTPUT.PUT_LINE('</HTML>');
    END IF;
    EXCEPTION
		WHEN no_data_found THEN
            sys.DBMS_OUTPUT.PUT_LINE('Exception no_data_found raised in Main of Test-Oracle.');
		
		WHEN OTHERS THEN
            sys.DBMS_OUTPUT.PUT_LINE('An error was encountered - '||SQLCODE||' - ERROR - '||SQLERRM);
END;]]></sql>
	</query>
</display>
</displays>